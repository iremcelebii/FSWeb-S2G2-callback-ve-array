const { fifaData } = require("./fifa.js");
//JavaScript ile Fonksiyonel Programlama: Map, Filter, Reduce, Foreach
//dizi Ã¼zerinde yapÄ±labilecek iÅŸlemler iÃ§in map, filter ve reduce gibi fonksiyonlar bulunmaktadÄ±r.
//parametre olarak fonksiyon alÄ±rlar.
//filter: orijinal arrayi deÄŸiÅŸtirmeden baÅŸka bir array veriyor. sÃ¶ylediÄŸimiz koÅŸullarÄ± uyan elemanlarÄ± alarak oluÅŸturuyor bu arrayi
//map: orijinal arrayi deÄŸiÅŸtirmeden baÅŸka bir array veriyor.bÃ¼tÃ¼n elemanlarda Ã§alÄ±ÅŸÄ±yor.
//foreach: dÃ¶ngÃ¼ yazmamÄ±za izin veriyor ancak herhangi bir ÅŸet return etmiyor.
//reduce: iki parametreli fonksiyonlar

/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */
console.clear();
console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1: filtrelenmisData2014");

//! farklÄ± yazÄ±m biÃ§imleri:

//! 1) hep yazdÄ±ÄŸÄ±n gibi:--------------------------------------------------------------------------------------------------

function filtrelemeFonk(x) {
  return x.Year == 2014 && x.Stage == "Final"; //x["Stage"] olarak da yazabilirdim
}
let filtrelenmisData2014_2 = fifaData.filter(filtrelemeFonk);
//console.log(filtrelenmisData2014_2);

//! 2) baÅŸka fonksiyon tanÄ±mlamadan iÃ§inde yazma--------------------------------------------------------------------------------
let filtrelenmisData2014_3 = fifaData.filter((x) => {
  return x.Year == 2014 && x.Stage == "Final";
});
//console.log(filtrelenmisData2014_3);

//! 3)en kÄ±sa hal:tek satÄ±rda yazabiliyorsan sÃ¼slÃ¼ paranteze ve return yazmana gerek yok-------------------------------------------
let filtrelenmisData2014_1 = fifaData.filter(
  (x) => x.Year == 2014 && x.Stage == "Final"
);
console.log("filtrelenmisData2014:");
console.log(filtrelenmisData2014_1);
console.log("filtrelenmisData2014.length:" + filtrelenmisData2014_1.length); //dizideki obje sayÄ±sÄ±nÄ± veriyor

//?sadece parametre varsa parantezsiz yazsam da olur, indeks eklenirse parantezli
console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1a: data2014HomeTeamName");

//!(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
let data2014HomeTeamName = filtrelenmisData2014_1.map(
  (x) => x["Home Team Name"]
);
console.log(data2014HomeTeamName); //veya:
console.log(filtrelenmisData2014_1[0]["Home Team Name"]);

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1b: data2014AwayTeamName");

//!(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)
let data2014AwayTeamName = filtrelenmisData2014_1.map(
  (x) => x["Away Team Name"]
);
console.log(data2014AwayTeamName);
console.log(filtrelenmisData2014_1[0]["Away Team Name"]);

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1c: data2014HomeTeamGoals");

//!(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)
let data2014HomeTeamGoals = filtrelenmisData2014_1.map(
  (x) => x["Home Team Goals"]
);
console.log(data2014HomeTeamGoals);
console.log(filtrelenmisData2014_1[0]["Home Team Goals"]);

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1d: data2014AwayTeamGoals");

//!(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
let data2014AwayTeamGoals = filtrelenmisData2014_1.map(
  (x) => x["Away Team Goals"]
);
console.log(data2014AwayTeamGoals);
console.log(filtrelenmisData2014_1[0]["Away Team Goals"]);

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 1e: 2014 DÃ¼nya kupasÄ± finali kazananÄ±");

//!(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/

if (
  filtrelenmisData2014_1[0]["Home Team Goals"] >
  filtrelenmisData2014_1[0]["Away Team Goals"]
) {
  console.log("Kazanan:" + filtrelenmisData2014_1[0]["Home Team Name"]);
} else if (
  filtrelenmisData2014_1[0]["Away Team Goals"] >
  filtrelenmisData2014_1[0]["Home Team Goals"]
) {
  console.log("Kazanan:" + filtrelenmisData2014_1[0]["Away Team Name"]);
} else {
  let kelime = filtrelenmisData2014_1[0]["Win conditions"].split(" ");
  console.log("Kazanan" + kelime[0]);
}

/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(dizi) {
  return dizi.filter((x) => x.Stage == "Final");
}

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 2: Finaller");

console.log(Finaller(fifaData).length + " adet final maÃ§Ä± var");

/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

//!YÃ¼ksek Mertebe Fonksiyonlar: Parametre olarak baÅŸka bir fonksiyonu alan ve/veya sonuÃ§ olarak baÅŸka bir fonksiyonu dÃ¶nen fonksiyonlardÄ±r.

function Yillar(dizi, cbFinaller) {
  let yeni = cbFinaller(dizi);
  return yeni.map((x) => x.Year);
}

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 3: Yillar");
console.log(Yillar(fifaData, Finaller));

/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */

function Kazananlar(dizi, cbFinaller) {
  let yeni = cbFinaller(dizi);
  let kazanantakimlar = [];

  yeni.forEach((x) => {
    if (x["Home Team Goals"] > x["Away Team Goals"]) {
      kazanantakimlar.push(x["Home Team Name"]);
    } else if (x["Away Team Goals"] > x["Home Team Goals"]) {
      kazanantakimlar.push(x["Away Team Name"]);
    } else {
      let kelime = x["Win conditions"].split(" ");
      kazanantakimlar.push(kelime[0]);
    }
  });
  return kazanantakimlar;
}
console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 4: Kazananlar");

console.log(Kazananlar(fifaData, Finaller));

/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(dizi, cbFinaller, cbYillar, cbKazananlar) {
  let metin = [];
  let yillar = cbYillar(dizi, cbFinaller);
  let kazananlar = cbKazananlar(dizi, cbFinaller);

  yillar.forEach((x, i) =>
    metin.push(`${x} yÄ±lÄ±nda, ${kazananlar[i]} dÃ¼nya kupasÄ±nÄ± kazandÄ±!`)
  );
  return metin;
}

console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 5: YillaraGoreKazananlar");

console.log(YillaraGoreKazananlar(fifaData, Finaller, Yillar, Kazananlar));

/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(cbFinaller) {
  let HteamGoal = cbFinaller.map((x) => x["Home Team Goals"]);
  let AteamGoal = cbFinaller.map((x) => x["Away Team Goals"]);
  let ToplamH = HteamGoal.reduce((toplam, item) => toplam + item, 0);
  let ToplamA = AteamGoal.reduce((toplam, item) => toplam + item, 0);
  let sonuc = ((ToplamH + ToplamA) / HteamGoal.length).toFixed(2);
  return sonuc;
}
console.log(
  "-------------------------------------------------------------------"
);
console.log("GÃ¶rev 6: OrtalamaGolSayisi");
console.log(OrtalamaGolSayisi(Finaller(fifaData)));

/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(dizi, takimIsmi) {
  let kazanantakimlar = [];

  dizi.forEach((x) => {
    if (x["Home Team Goals"] > x["Away Team Goals"]) {
      kazanantakimlar.push(x["Home Team Name"]);
    } else if (x["Away Team Goals"] > x["Home Team Goals"]) {
      kazanantakimlar.push(x["Away Team Name"]);
    } else {
      let kelime = x["Win conditions"].split(" ");
      kazanantakimlar.push(kelime[0]);
    }
  });

  let newArr = kazanantakimlar.filter((x) => x === takimIsmi);
  let sayi = newArr.reduce((item) => item + 1, 0);
  return sayi;
}

console.log(
  "-------------------------------------------------------------------"
);
console.log("Bonus 1: UlkelerinKazanmaSayilari");

console.log(UlkelerinKazanmaSayilari(fifaData, "Romania"));

/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(dizi, cbFinaller) {
  let finalDizisi = cbFinaller(dizi);
  let golSayilariDizisi = [];

  finalDizisi.forEach((x) => {
    if (x["Home Team Goals"] > x["Away Team Goals"]) {
      golSayilariDizisi.push({
        "Team Name": x["Home Team Name"],
        "Team Goals": x["Home Team Goals"],
      });
    } else if (x["Away Team Goals"] > x["Home Team Goals"]) {
      golSayilariDizisi.push({
        "Team Name": x["Away Team Name"],
        "Team Goals": x["Away Team Goals"],
      });
    } else {
      golSayilariDizisi.push({
        "Team Name": x["Home Team Name"],
        "Team Goals": x["Home Team Goals"],
      });
      golSayilariDizisi.push({
        "Team Name": x["Away Team Name"],
        "Team Goals": x["Away Team Goals"],
      });
    }
  });
  console.log(golSayilariDizisi);

  let maxgolsayisi = 0;
  let skorerTakim = "";
  for (let i = 0; i < golSayilariDizisi.length; i++) {
    if (golSayilariDizisi[i]["Team Goals"] > maxgolsayisi) {
      maxgolsayisi = golSayilariDizisi[i]["Team Goals"];
      skorerTakim = golSayilariDizisi[i]["Team Name"];
    }
  }

  return skorerTakim;
}

console.log(
  "-------------------------------------------------------------------"
);
console.log("Bonus 2: EnCokGolAtan");
console.log(EnCokGolAtan(fifaData, Finaller));

/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(dizi, cbFinaller) {
  let finalDizisi = cbFinaller(dizi);
  let golSayilariDizisi = [];

  finalDizisi.forEach((x) => {
    if (x["Home Team Goals"] > x["Away Team Goals"]) {
      golSayilariDizisi.push({
        "Team Name": x["Away Team Name"],
        "Team Goals": x["Home Team Goals"],
      });
    } else if (x["Away Team Goals"] > x["Home Team Goals"]) {
      golSayilariDizisi.push({
        "Team Name": x["Home Team Name"],
        "Team Goals": x["Away Team Goals"],
      });
    } else {
      golSayilariDizisi.push({
        "Team Name": x["Away Team Name"],
        "Team Goals": x["Home Team Goals"],
      });
      golSayilariDizisi.push({
        "Team Name": x["Home Team Name"],
        "Team Goals": x["Away Team Goals"],
      });
    }
  });

  let maxgolsayisi = 0;
  let enkotuTakim = "";
  for (let i = 0; i < golSayilariDizisi.length; i++) {
    if (golSayilariDizisi[i]["Team Goals"] > maxgolsayisi) {
      maxgolsayisi = golSayilariDizisi[i]["Team Goals"];
      enkotuTakim = golSayilariDizisi[i]["Team Name"];
    }
  }

  return enkotuTakim;
}
console.log(
  "-------------------------------------------------------------------"
);
console.log("Bonus 3: EnKotuDefans");
console.log(EnKotuDefans(fifaData, Finaller));

/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */

//!denemeler

// let newArr = fifaData.map((item) => {
//   return {
//     "Home Team Name": item["Home Team Name"],
//     "Away Team Name": item["Away Team Name"],
//   };
// });
// console.log(
//   "-------------------------------------------------------------------"
// );
// console.log("GÃ¶rev 0: deneme");
// console.log(newArr);

/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
  console.log("Kodlar Ã§alÄ±ÅŸÄ±yor");
  return "as";
}
sa();
module.exports = {
  sa,
  Finaller,
  Yillar,
  Kazananlar,
  YillaraGoreKazananlar,
  OrtalamaGolSayisi,
};
